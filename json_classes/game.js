// Generated by https://quicktype.io

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
function toGame(json) {
    return cast(JSON.parse(json), r("Game"));
}

function gameToJson(value) {
    return JSON.stringify(uncast(value, r("Game")), null, 2);
}

function invalidValue(typ, val) {
    throw Error(`Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`);
}

function jsonToJSProps(typ) {
    if (typ.jsonToJS === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.json] = { key: p.js, typ: p.typ });
        typ.jsonToJS = map;
    }
    return typ.jsonToJS;
}

function jsToJSONProps(typ) {
    if (typ.jsToJSON === undefined) {
        var map = {};
        typ.props.forEach((p) => map[p.js] = { key: p.json, typ: p.typ });
        typ.jsToJSON = map;
    }
    return typ.jsToJSON;
}

function transform(val, typ, getProps) {
    function transformPrimitive(typ, val) {
        if (typeof typ === typeof val) return val;
        return invalidValue(typ, val);
    }

    function transformUnion(typs, val) {
        // val must validate against one typ in typs
        var l = typs.length;
        for (var i = 0; i < l; i++) {
            var typ = typs[i];
            try {
                return transform(val, typ, getProps);
            } catch (_) {}
        }
        return invalidValue(typs, val);
    }

    function transformEnum(cases, val) {
        if (cases.indexOf(val) !== -1) return val;
        return invalidValue(cases, val);
    }

    function transformArray(typ, val) {
        // val must be an array with no invalid elements
        if (!Array.isArray(val)) return invalidValue("array", val);
        return val.map(el => transform(el, typ, getProps));
    }

    function transformObject(props, additional, val) {
        if (val === null || typeof val !== "object" || Array.isArray(val)) {
            return invalidValue("object", val);
        }
        var result = {};
        Object.getOwnPropertyNames(props).forEach(key => {
            const prop = props[key];
            const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
            result[prop.key] = transform(v, prop.typ, getProps);
        });
        Object.getOwnPropertyNames(val).forEach(key => {
            if (!Object.prototype.hasOwnProperty.call(props, key)) {
                result[key] = transform(val[key], additional, getProps);
            }
        });
        return result;
    }

    if (typ === "any") return val;
    if (typ === null) {
        if (val === null) return val;
        return invalidValue(typ, val);
    }
    if (typ === false) return invalidValue(typ, val);
    while (typeof typ === "object" && typ.ref !== undefined) {
        typ = typeMap[typ.ref];
    }
    if (Array.isArray(typ)) return transformEnum(typ, val);
    if (typeof typ === "object") {
        return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val)
            : typ.hasOwnProperty("arrayItems")    ? transformArray(typ.arrayItems, val)
            : typ.hasOwnProperty("props")         ? transformObject(getProps(typ), typ.additional, val)
            : invalidValue(typ, val);
    }
    return transformPrimitive(typ, val);
}

function cast(val, typ) {
    return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
    return transform(val, typ, jsToJSONProps);
}

function a(typ) {
    return { arrayItems: typ };
}

function u(...typs) {
    return { unionMembers: typs };
}

function o(props, additional) {
    return { props, additional };
}

function m(additional) {
    return { props: [], additional };
}

function r(name) {
    return { ref: name };
}

const typeMap = {
    "Game": o([
        { json: "copyright", js: "copyright", typ: "" },
        { json: "gamePk", js: "gamePk", typ: 0 },
        { json: "link", js: "link", typ: "" },
        { json: "metaData", js: "metaData", typ: r("MetaData") },
        { json: "gameData", js: "gameData", typ: r("GameData") },
        { json: "liveData", js: "liveData", typ: r("LiveData") },
    ], false),
    "GameData": o([
        { json: "game", js: "game", typ: r("GameClass") },
        { json: "datetime", js: "datetime", typ: r("Datetime") },
        { json: "status", js: "status", typ: r("Status") },
        { json: "teams", js: "teams", typ: r("GameDataTeams") },
        { json: "players", js: "players", typ: m(r("PlayerValue")) },
        { json: "venue", js: "venue", typ: r("GameDataVenue") },
    ], false),
    "Datetime": o([
        { json: "dateTime", js: "dateTime", typ: "" },
        { json: "endDateTime", js: "endDateTime", typ: "" },
    ], false),
    "GameClass": o([
        { json: "pk", js: "pk", typ: 0 },
        { json: "season", js: "season", typ: "" },
        { json: "type", js: "type", typ: r("Type") },
    ], false),
    "PlayerValue": o([
        { json: "id", js: "id", typ: 0 },
        { json: "fullName", js: "fullName", typ: "" },
        { json: "link", js: "link", typ: "" },
        { json: "firstName", js: "firstName", typ: "" },
        { json: "lastName", js: "lastName", typ: "" },
        { json: "primaryNumber", js: "primaryNumber", typ: "" },
        { json: "birthDate", js: "birthDate", typ: "" },
        { json: "currentAge", js: "currentAge", typ: u(undefined, 0) },
        { json: "birthCity", js: "birthCity", typ: "" },
        { json: "birthStateProvince", js: "birthStateProvince", typ: u(undefined, "") },
        { json: "birthCountry", js: "birthCountry", typ: "" },
        { json: "nationality", js: "nationality", typ: "" },
        { json: "height", js: "height", typ: "" },
        { json: "weight", js: "weight", typ: 0 },
        { json: "active", js: "active", typ: true },
        { json: "alternateCaptain", js: "alternateCaptain", typ: u(undefined, true) },
        { json: "captain", js: "captain", typ: u(undefined, true) },
        { json: "rookie", js: "rookie", typ: true },
        { json: "shootsCatches", js: "shootsCatches", typ: r("Type") },
        { json: "rosterStatus", js: "rosterStatus", typ: r("RosterStatus") },
        { json: "currentTeam", js: "currentTeam", typ: u(undefined, r("CurrentTeam")) },
        { json: "primaryPosition", js: "primaryPosition", typ: r("Position") },
    ], false),
    "CurrentTeam": o([
        { json: "id", js: "id", typ: 0 },
        { json: "name", js: "name", typ: "" },
        { json: "link", js: "link", typ: "" },
        { json: "triCode", js: "triCode", typ: u(undefined, "") },
        { json: "abbreviation", js: "abbreviation", typ: u(undefined, r("TriCodeEnum")) },
    ], false),
    "Position": o([
        { json: "code", js: "code", typ: r("Type") },
        { json: "name", js: "name", typ: r("TypeEnum") },
        { json: "type", js: "type", typ: r("TypeEnum") },
        { json: "abbreviation", js: "abbreviation", typ: r("PrimaryPositionAbbreviation") },
    ], false),
    "Status": o([
        { json: "abstractGameState", js: "abstractGameState", typ: "" },
        { json: "codedGameState", js: "codedGameState", typ: "" },
        { json: "detailedState", js: "detailedState", typ: "" },
        { json: "statusCode", js: "statusCode", typ: "" },
        { json: "startTimeTBD", js: "startTimeTBD", typ: true },
    ], false),
    "GameDataTeams": o([
        { json: "away", js: "away", typ: r("PurpleAway") },
        { json: "home", js: "home", typ: r("PurpleAway") },
    ], false),
    "PurpleAway": o([
        { json: "id", js: "id", typ: 0 },
        { json: "name", js: "name", typ: r("DivisionName") },
        { json: "link", js: "link", typ: r("Link") },
        { json: "venue", js: "venue", typ: r("AwayVenue") },
        { json: "abbreviation", js: "abbreviation", typ: r("TriCodeEnum") },
        { json: "triCode", js: "triCode", typ: r("TriCodeEnum") },
        { json: "teamName", js: "teamName", typ: "" },
        { json: "locationName", js: "locationName", typ: "" },
        { json: "firstYearOfPlay", js: "firstYearOfPlay", typ: "" },
        { json: "division", js: "division", typ: r("Division") },
        { json: "conference", js: "conference", typ: r("CurrentTeam") },
        { json: "franchise", js: "franchise", typ: r("Franchise") },
        { json: "shortName", js: "shortName", typ: "" },
        { json: "officialSiteUrl", js: "officialSiteUrl", typ: "" },
        { json: "franchiseId", js: "franchiseId", typ: 0 },
        { json: "active", js: "active", typ: true },
    ], false),
    "Division": o([
        { json: "id", js: "id", typ: 0 },
        { json: "name", js: "name", typ: r("DivisionName") },
        { json: "nameShort", js: "nameShort", typ: u(undefined, "") },
        { json: "link", js: "link", typ: r("Link") },
        { json: "abbreviation", js: "abbreviation", typ: u(undefined, "") },
        { json: "triCode", js: "triCode", typ: u(undefined, r("TriCodeEnum")) },
    ], false),
    "Franchise": o([
        { json: "franchiseId", js: "franchiseId", typ: 0 },
        { json: "teamName", js: "teamName", typ: "" },
        { json: "link", js: "link", typ: "" },
    ], false),
    "AwayVenue": o([
        { json: "id", js: "id", typ: u(undefined, 0) },
        { json: "name", js: "name", typ: "" },
        { json: "link", js: "link", typ: "" },
        { json: "city", js: "city", typ: "" },
        { json: "timeZone", js: "timeZone", typ: r("TimeZone") },
    ], false),
    "TimeZone": o([
        { json: "id", js: "id", typ: "" },
        { json: "offset", js: "offset", typ: 0 },
        { json: "tz", js: "tz", typ: "" },
    ], false),
    "GameDataVenue": o([
        { json: "name", js: "name", typ: "" },
        { json: "link", js: "link", typ: "" },
    ], false),
    "LiveData": o([
        { json: "plays", js: "plays", typ: r("Plays") },
        { json: "linescore", js: "linescore", typ: r("Linescore") },
        { json: "boxscore", js: "boxscore", typ: r("Boxscore") },
        { json: "decisions", js: "decisions", typ: r("Decisions") },
    ], false),
    "Boxscore": o([
        { json: "teams", js: "teams", typ: r("BoxscoreTeams") },
        { json: "officials", js: "officials", typ: a(r("Official")) },
    ], false),
    "Official": o([
        { json: "official", js: "official", typ: r("FirstStar") },
        { json: "officialType", js: "officialType", typ: "" },
    ], false),
    "FirstStar": o([
        { json: "id", js: "id", typ: 0 },
        { json: "fullName", js: "fullName", typ: "" },
        { json: "link", js: "link", typ: "" },
    ], false),
    "BoxscoreTeams": o([
        { json: "away", js: "away", typ: r("FluffyAway") },
        { json: "home", js: "home", typ: r("Home") },
    ], false),
    "FluffyAway": o([
        { json: "team", js: "team", typ: r("CurrentTeam") },
        { json: "teamStats", js: "teamStats", typ: r("TeamStats") },
        { json: "players", js: "players", typ: r("AwayPlayers") },
        { json: "goalies", js: "goalies", typ: a(0) },
        { json: "skaters", js: "skaters", typ: a(0) },
        { json: "onIce", js: "onIce", typ: a(0) },
        { json: "onIcePlus", js: "onIcePlus", typ: a(r("OnIcePlus")) },
        { json: "scratches", js: "scratches", typ: a(0) },
        { json: "penaltyBox", js: "penaltyBox", typ: a("any") },
        { json: "coaches", js: "coaches", typ: a(r("Coach")) },
    ], false),
    "Coach": o([
        { json: "person", js: "person", typ: r("CoachPerson") },
        { json: "position", js: "position", typ: r("Position") },
    ], false),
    "CoachPerson": o([
        { json: "fullName", js: "fullName", typ: "" },
        { json: "link", js: "link", typ: "" },
    ], false),
    "OnIcePlus": o([
        { json: "playerId", js: "playerId", typ: 0 },
        { json: "shiftDuration", js: "shiftDuration", typ: 0 },
        { json: "stamina", js: "stamina", typ: 0 },
    ], false),
    "AwayPlayers": o([
        { json: "ID8473507", js: "ID8473507", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8474818", js: "ID8474818", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8480829", js: "ID8480829", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8477957", js: "ID8477957", typ: r("Id84") },
        { json: "ID8474038", js: "ID8474038", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8475848", js: "ID8475848", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8476948", js: "ID8476948", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8477503", js: "ID8477503", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8476479", js: "ID8476479", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8476469", js: "ID8476469", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8471679", js: "ID8471679", typ: r("Id847") },
        { json: "ID8476443", js: "ID8476443", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8477476", js: "ID8477476", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8476422", js: "ID8476422", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8476285", js: "ID8476285", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8477494", js: "ID8477494", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8473991", js: "ID8473991", typ: r("Id84") },
        { json: "ID8478454", js: "ID8478454", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8479376", js: "ID8479376", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8476381", js: "ID8476381", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8475193", js: "ID8475193", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8469521", js: "ID8469521", typ: r("Id84") },
    ], false),
    "Id84": o([
        { json: "person", js: "person", typ: r("PurplePerson") },
        { json: "jerseyNumber", js: "jerseyNumber", typ: "" },
        { json: "position", js: "position", typ: r("Position") },
        { json: "stats", js: "stats", typ: r("StatsClass") },
    ], false),
    "PurplePerson": o([
        { json: "id", js: "id", typ: 0 },
        { json: "fullName", js: "fullName", typ: "" },
        { json: "link", js: "link", typ: "" },
        { json: "shootsCatches", js: "shootsCatches", typ: r("Type") },
        { json: "rosterStatus", js: "rosterStatus", typ: r("RosterStatus") },
    ], false),
    "StatsClass": o([
    ], false),
    "Id847": o([
        { json: "person", js: "person", typ: r("PurplePerson") },
        { json: "jerseyNumber", js: "jerseyNumber", typ: "" },
        { json: "position", js: "position", typ: r("Position") },
        { json: "stats", js: "stats", typ: r("ID8471679Stats") },
    ], false),
    "ID8471679Stats": o([
        { json: "goalieStats", js: "goalieStats", typ: r("GoalieStats") },
    ], false),
    "GoalieStats": o([
        { json: "timeOnIce", js: "timeOnIce", typ: "" },
        { json: "assists", js: "assists", typ: 0 },
        { json: "goals", js: "goals", typ: 0 },
        { json: "pim", js: "pim", typ: 0 },
        { json: "shots", js: "shots", typ: 0 },
        { json: "saves", js: "saves", typ: 0 },
        { json: "powerPlaySaves", js: "powerPlaySaves", typ: 0 },
        { json: "shortHandedSaves", js: "shortHandedSaves", typ: 0 },
        { json: "evenSaves", js: "evenSaves", typ: 0 },
        { json: "shortHandedShotsAgainst", js: "shortHandedShotsAgainst", typ: 0 },
        { json: "evenShotsAgainst", js: "evenShotsAgainst", typ: 0 },
        { json: "powerPlayShotsAgainst", js: "powerPlayShotsAgainst", typ: 0 },
        { json: "decision", js: "decision", typ: "" },
        { json: "savePercentage", js: "savePercentage", typ: 3.14 },
        { json: "powerPlaySavePercentage", js: "powerPlaySavePercentage", typ: 3.14 },
        { json: "evenStrengthSavePercentage", js: "evenStrengthSavePercentage", typ: 3.14 },
    ], false),
    "LivingstoneSouthernWhiteFacedOwl": o([
        { json: "person", js: "person", typ: r("PurplePerson") },
        { json: "jerseyNumber", js: "jerseyNumber", typ: "" },
        { json: "position", js: "position", typ: r("Position") },
        { json: "stats", js: "stats", typ: r("PurpleStats") },
    ], false),
    "PurpleStats": o([
        { json: "skaterStats", js: "skaterStats", typ: r("SkaterStats") },
    ], false),
    "SkaterStats": o([
        { json: "timeOnIce", js: "timeOnIce", typ: "" },
        { json: "assists", js: "assists", typ: 0 },
        { json: "goals", js: "goals", typ: 0 },
        { json: "shots", js: "shots", typ: 0 },
        { json: "hits", js: "hits", typ: 0 },
        { json: "powerPlayGoals", js: "powerPlayGoals", typ: 0 },
        { json: "powerPlayAssists", js: "powerPlayAssists", typ: 0 },
        { json: "penaltyMinutes", js: "penaltyMinutes", typ: 0 },
        { json: "faceOffWins", js: "faceOffWins", typ: 0 },
        { json: "faceoffTaken", js: "faceoffTaken", typ: 0 },
        { json: "takeaways", js: "takeaways", typ: 0 },
        { json: "giveaways", js: "giveaways", typ: 0 },
        { json: "shortHandedGoals", js: "shortHandedGoals", typ: 0 },
        { json: "shortHandedAssists", js: "shortHandedAssists", typ: 0 },
        { json: "blocked", js: "blocked", typ: 0 },
        { json: "plusMinus", js: "plusMinus", typ: 0 },
        { json: "evenTimeOnIce", js: "evenTimeOnIce", typ: "" },
        { json: "powerPlayTimeOnIce", js: "powerPlayTimeOnIce", typ: "" },
        { json: "shortHandedTimeOnIce", js: "shortHandedTimeOnIce", typ: "" },
        { json: "faceOffPct", js: "faceOffPct", typ: u(undefined, 3.14) },
    ], false),
    "TeamStats": o([
        { json: "teamSkaterStats", js: "teamSkaterStats", typ: r("TeamSkaterStats") },
    ], false),
    "TeamSkaterStats": o([
        { json: "goals", js: "goals", typ: 0 },
        { json: "pim", js: "pim", typ: 0 },
        { json: "shots", js: "shots", typ: 0 },
        { json: "powerPlayPercentage", js: "powerPlayPercentage", typ: "" },
        { json: "powerPlayGoals", js: "powerPlayGoals", typ: 3.14 },
        { json: "powerPlayOpportunities", js: "powerPlayOpportunities", typ: 3.14 },
        { json: "faceOffWinPercentage", js: "faceOffWinPercentage", typ: "" },
        { json: "blocked", js: "blocked", typ: 0 },
        { json: "takeaways", js: "takeaways", typ: 0 },
        { json: "giveaways", js: "giveaways", typ: 0 },
        { json: "hits", js: "hits", typ: 0 },
    ], false),
    "Home": o([
        { json: "team", js: "team", typ: r("Division") },
        { json: "teamStats", js: "teamStats", typ: r("TeamStats") },
        { json: "players", js: "players", typ: r("HomePlayers") },
        { json: "goalies", js: "goalies", typ: a(0) },
        { json: "skaters", js: "skaters", typ: a(0) },
        { json: "onIce", js: "onIce", typ: a(0) },
        { json: "onIcePlus", js: "onIcePlus", typ: a(r("OnIcePlus")) },
        { json: "scratches", js: "scratches", typ: a(0) },
        { json: "penaltyBox", js: "penaltyBox", typ: a("any") },
        { json: "coaches", js: "coaches", typ: a(r("Coach")) },
    ], false),
    "HomePlayers": o([
        { json: "ID8475718", js: "ID8475718", typ: r("Id84") },
        { json: "ID8478408", js: "ID8478408", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8468493", js: "ID8468493", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8475716", js: "ID8475716", typ: r("Id84") },
        { json: "ID8475786", js: "ID8475786", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8476853", js: "ID8476853", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8477953", js: "ID8477953", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8474589", js: "ID8474589", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8479318", js: "ID8479318", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8479458", js: "ID8479458", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8477015", js: "ID8477015", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8475166", js: "ID8475166", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8476410", js: "ID8476410", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8480943", js: "ID8480943", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8480944", js: "ID8480944", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8475883", js: "ID8475883", typ: r("Id847") },
        { json: "ID8477512", js: "ID8477512", typ: r("Id84") },
        { json: "ID8477341", js: "ID8477341", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8474581", js: "ID8474581", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8478483", js: "ID8478483", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8475172", js: "ID8475172", typ: r("LivingstoneSouthernWhiteFacedOwl") },
        { json: "ID8466139", js: "ID8466139", typ: r("LivingstoneSouthernWhiteFacedOwl") },
    ], false),
    "Decisions": o([
        { json: "winner", js: "winner", typ: r("FirstStar") },
        { json: "loser", js: "loser", typ: r("FirstStar") },
        { json: "firstStar", js: "firstStar", typ: r("FirstStar") },
        { json: "secondStar", js: "secondStar", typ: r("FirstStar") },
        { json: "thirdStar", js: "thirdStar", typ: r("FirstStar") },
    ], false),
    "Linescore": o([
        { json: "currentPeriod", js: "currentPeriod", typ: 0 },
        { json: "currentPeriodOrdinal", js: "currentPeriodOrdinal", typ: r("CurrentPeriodOrdinal") },
        { json: "currentPeriodTimeRemaining", js: "currentPeriodTimeRemaining", typ: "" },
        { json: "periods", js: "periods", typ: a(r("Period")) },
        { json: "shootoutInfo", js: "shootoutInfo", typ: r("ShootoutInfo") },
        { json: "teams", js: "teams", typ: r("LinescoreTeams") },
        { json: "powerPlayStrength", js: "powerPlayStrength", typ: "" },
        { json: "hasShootout", js: "hasShootout", typ: true },
        { json: "intermissionInfo", js: "intermissionInfo", typ: r("IntermissionInfo") },
        { json: "powerPlayInfo", js: "powerPlayInfo", typ: r("PowerPlayInfo") },
    ], false),
    "IntermissionInfo": o([
        { json: "intermissionTimeRemaining", js: "intermissionTimeRemaining", typ: 0 },
        { json: "intermissionTimeElapsed", js: "intermissionTimeElapsed", typ: 0 },
        { json: "inIntermission", js: "inIntermission", typ: true },
    ], false),
    "Period": o([
        { json: "periodType", js: "periodType", typ: r("PeriodType") },
        { json: "startTime", js: "startTime", typ: "" },
        { json: "endTime", js: "endTime", typ: "" },
        { json: "num", js: "num", typ: 0 },
        { json: "ordinalNum", js: "ordinalNum", typ: r("CurrentPeriodOrdinal") },
        { json: "home", js: "home", typ: r("PeriodAway") },
        { json: "away", js: "away", typ: r("PeriodAway") },
    ], false),
    "PeriodAway": o([
        { json: "goals", js: "goals", typ: 0 },
        { json: "shotsOnGoal", js: "shotsOnGoal", typ: 0 },
        { json: "rinkSide", js: "rinkSide", typ: "" },
    ], false),
    "PowerPlayInfo": o([
        { json: "situationTimeRemaining", js: "situationTimeRemaining", typ: 0 },
        { json: "situationTimeElapsed", js: "situationTimeElapsed", typ: 0 },
        { json: "inSituation", js: "inSituation", typ: true },
    ], false),
    "ShootoutInfo": o([
        { json: "away", js: "away", typ: r("ShootoutInfoAway") },
        { json: "home", js: "home", typ: r("ShootoutInfoAway") },
    ], false),
    "ShootoutInfoAway": o([
        { json: "scores", js: "scores", typ: 0 },
        { json: "attempts", js: "attempts", typ: 0 },
    ], false),
    "LinescoreTeams": o([
        { json: "home", js: "home", typ: r("TentacledAway") },
        { json: "away", js: "away", typ: r("TentacledAway") },
    ], false),
    "TentacledAway": o([
        { json: "team", js: "team", typ: r("CurrentTeam") },
        { json: "goals", js: "goals", typ: 0 },
        { json: "shotsOnGoal", js: "shotsOnGoal", typ: 0 },
        { json: "goaliePulled", js: "goaliePulled", typ: true },
        { json: "numSkaters", js: "numSkaters", typ: 0 },
        { json: "powerPlay", js: "powerPlay", typ: true },
    ], false),
    "Plays": o([
        { json: "allPlays", js: "allPlays", typ: a(r("AllPlay")) },
        { json: "scoringPlays", js: "scoringPlays", typ: a(0) },
        { json: "penaltyPlays", js: "penaltyPlays", typ: a(0) },
        { json: "playsByPeriod", js: "playsByPeriod", typ: a(r("PlaysByPeriod")) },
        { json: "currentPlay", js: "currentPlay", typ: r("CurrentPlay") },
    ], false),
    "AllPlay": o([
        { json: "result", js: "result", typ: r("AllPlayResult") },
        { json: "about", js: "about", typ: r("About") },
        { json: "coordinates", js: "coordinates", typ: r("AllPlayCoordinates") },
        { json: "players", js: "players", typ: u(undefined, a(r("PlayerElement"))) },
        { json: "team", js: "team", typ: u(undefined, r("Division")) },
    ], false),
    "About": o([
        { json: "eventIdx", js: "eventIdx", typ: 0 },
        { json: "eventId", js: "eventId", typ: 0 },
        { json: "period", js: "period", typ: 0 },
        { json: "periodType", js: "periodType", typ: r("PeriodType") },
        { json: "ordinalNum", js: "ordinalNum", typ: r("CurrentPeriodOrdinal") },
        { json: "periodTime", js: "periodTime", typ: "" },
        { json: "periodTimeRemaining", js: "periodTimeRemaining", typ: "" },
        { json: "dateTime", js: "dateTime", typ: "" },
        { json: "goals", js: "goals", typ: r("Goals") },
    ], false),
    "Goals": o([
        { json: "away", js: "away", typ: 0 },
        { json: "home", js: "home", typ: 0 },
    ], false),
    "AllPlayCoordinates": o([
        { json: "x", js: "x", typ: u(undefined, 3.14) },
        { json: "y", js: "y", typ: u(undefined, 3.14) },
    ], false),
    "PlayerElement": o([
        { json: "player", js: "player", typ: r("FirstStar") },
        { json: "playerType", js: "playerType", typ: r("PlayerType") },
        { json: "seasonTotal", js: "seasonTotal", typ: u(undefined, 0) },
    ], false),
    "AllPlayResult": o([
        { json: "event", js: "event", typ: r("Description") },
        { json: "eventCode", js: "eventCode", typ: "" },
        { json: "eventTypeId", js: "eventTypeId", typ: r("EventTypeID") },
        { json: "description", js: "description", typ: "" },
        { json: "secondaryType", js: "secondaryType", typ: u(undefined, "") },
        { json: "strength", js: "strength", typ: u(undefined, r("Strength")) },
        { json: "gameWinningGoal", js: "gameWinningGoal", typ: u(undefined, true) },
        { json: "emptyNet", js: "emptyNet", typ: u(undefined, true) },
        { json: "penaltySeverity", js: "penaltySeverity", typ: u(undefined, "") },
        { json: "penaltyMinutes", js: "penaltyMinutes", typ: u(undefined, 0) },
    ], false),
    "Strength": o([
        { json: "code", js: "code", typ: "" },
        { json: "name", js: "name", typ: "" },
    ], false),
    "CurrentPlay": o([
        { json: "result", js: "result", typ: r("CurrentPlayResult") },
        { json: "about", js: "about", typ: r("About") },
        { json: "coordinates", js: "coordinates", typ: r("StatsClass") },
    ], false),
    "CurrentPlayResult": o([
        { json: "event", js: "event", typ: r("Description") },
        { json: "eventCode", js: "eventCode", typ: "" },
        { json: "eventTypeId", js: "eventTypeId", typ: r("EventTypeID") },
        { json: "description", js: "description", typ: r("Description") },
    ], false),
    "PlaysByPeriod": o([
        { json: "startIndex", js: "startIndex", typ: 0 },
        { json: "plays", js: "plays", typ: a(0) },
        { json: "endIndex", js: "endIndex", typ: 0 },
    ], false),
    "MetaData": o([
        { json: "wait", js: "wait", typ: 0 },
        { json: "timeStamp", js: "timeStamp", typ: "" },
    ], false),
    "Type": [
        "C",
        "D",
        "G",
        "HC",
        "L",
        "N/A",
        "R",
    ],
    "TriCodeEnum": [
        "MTL",
        "TOR",
    ],
    "PrimaryPositionAbbreviation": [
        "C",
        "D",
        "G",
        "Head Coach",
        "LW",
        "N/A",
        "RW",
    ],
    "TypeEnum": [
        "Center",
        "Defenseman",
        "Forward",
        "Goalie",
        "Head Coach",
        "Left Wing",
        "Right Wing",
        "Unknown",
    ],
    "RosterStatus": [
        "I",
        "N",
        "Y",
    ],
    "Link": [
        "/api/v1/divisions/17",
        "/api/v1/teams/10",
        "/api/v1/teams/8",
    ],
    "DivisionName": [
        "Atlantic",
        "Montréal Canadiens",
        "Toronto Maple Leafs",
    ],
    "CurrentPeriodOrdinal": [
        "OT",
        "1st",
        "2nd",
        "3rd",
    ],
    "PeriodType": [
        "OVERTIME",
        "REGULAR",
    ],
    "PlayerType": [
        "Assist",
        "Blocker",
        "DrewBy",
        "Goalie",
        "Hittee",
        "Hitter",
        "Loser",
        "PenaltyOn",
        "PlayerID",
        "Scorer",
        "Shooter",
        "Winner",
    ],
    "Description": [
        "Blocked Shot",
        "Faceoff",
        "Game End",
        "Game Scheduled",
        "Giveaway",
        "Goal",
        "Hit",
        "Missed Shot",
        "Penalty",
        "Period End",
        "Period Official",
        "Period Ready",
        "Period Start",
        "Shot",
        "Stoppage",
        "Takeaway",
    ],
    "EventTypeID": [
        "BLOCKED_SHOT",
        "FACEOFF",
        "GAME_END",
        "GAME_SCHEDULED",
        "GIVEAWAY",
        "GOAL",
        "HIT",
        "MISSED_SHOT",
        "PENALTY",
        "PERIOD_END",
        "PERIOD_OFFICIAL",
        "PERIOD_READY",
        "PERIOD_START",
        "SHOT",
        "STOP",
        "TAKEAWAY",
    ],
};

module.exports = {
    "gameToJson": gameToJson,
    "toGame": toGame,
};
